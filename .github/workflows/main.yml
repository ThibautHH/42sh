name: 'Main workflow'
on:
  push: {}
  pull_request:
    types: [closed, review_requested]
env:
  MIRROR_URL: 'git@github.com:EpitechPromo2027/B-PSU-200-REN-2-1-42sh-thibaut.hebert-henriette'
  EXECUTABLES: '42sh'
jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: 'ghcr.io/epitech/coding-style-checker:latest'
    name: 'Check coding style'
    steps:
      - uses: actions/checkout@v3
      - name: 'Check coding style'
        run: |
          check.sh $(pwd) $(pwd)
          if [ -s coding-style-reports.log ]
          then
            cat coding-style-reports.log | while read line; do
              echo "::error file=$(echo "$line" | cut -d: -f1),"\
              "line=$(echo "$line" | cut -d: -f2),"\
              "title=$(echo "$line" | cut -d: -f3 | xargs)"\
              " coding style error::$(echo "$line" | cut -d: -f4)"
            done
            exit 1
          fi
  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: 'epitechcontent/epitest-docker:latest'
    name: 'Check program compilation'
    steps:
      - uses: actions/checkout@v3
      - name: 'Check program compilation'
        timeout-minutes: 2
        run: |
          make || exit 1
      - name: 'Check clean rule'
        run: |
          make clean || exit 1
      - name: 'Check executables'
        run: |
          for executable in $(echo "$EXECUTABLES" | tr ',' ' ')
          do
            if [ ! -f "$executable" ] || [ ! -x "$executable" ]
            then exit 1; fi
          done
      - name: 'Check fclean rule'
        run: |
          make fclean || exit 1
          for executable in $(echo "$EXECUTABLES" | tr ',' ' ')
          do
            if [ -f "$executable" ]
            then exit 1; fi
          done
  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: 'epitechcontent/epitest-docker:latest'
    name: 'Run tests'
    steps:
      - uses: actions/checkout@v3
      - name: 'Run tests'
        timeout-minutes: 2
        run: |
          make tests_run || exit 1
  push_to_mirror:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    steps:
      - uses: actions/checkout@v3
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ env.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.SSH_MIRROR_KEY }}
